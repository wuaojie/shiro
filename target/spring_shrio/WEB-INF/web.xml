<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         id="WebApp_ID" version="3.0">

    <!--该元素用来声明应用范围(整个WEB项目)内的上下文初始化参数。
    param-name 设定上下文的参数名称。必须是唯一名称
    param-value 设定的参数名称的值-->
    <!--
        1. 启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点:
         <listener></listener> 和 <context-param></context-param>
        2.紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文.
        3.容器将<context-param></context-param>转化为键值对,并交给ServletContext.
        4.容器创建<listener></listener>中的类实例,即创建监听.
        5.在监听中会有contextInitialized(ServletContextEvent args)初始化方法,
        在这个方法中获得ServletContext = ServletContextEvent.getServletContext();
        context-param的值 = ServletContext.getInitParameter("context-param的键");
        6.得到这个context-param的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.
        这个动作会比所有的Servlet都要早.
        换句话说,这个时候,你对<context-param>中的键值做的操作,将在你的WEB项目完全启动之前被执行.
        7.举例.你可能想在项目启动之前就打开数据库.
        那么这里就可以在<context-param>中设置数据库的连接方式,在监听类中初始化数据库的连接.
        8.这个监听是自己写的一个类,除了初始化方法,它还有销毁方法.用于关闭应用前释放资源.比如说数据库连接的关闭.
        由上面的初始化过程可知容器对于web.xml的加载过程是context-param >> listener  >> fileter  >> servlet
    -->

    <!--ServletContext读取键值对配置-->
    <!--系统默认 在WEB-INF/applicationContext.xml这里显示设置spring.xml-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:/spring*.xml</param-value>
    </context-param>

    <!--设置spring监听器-->
    <!--spring上下文监听器-->
    <!--    ContextLoaderListener extends ContextLoader implements ServletContextListener
            ServletContextListener只负责监听Web容器的启动和关闭的事件。
            ContextLoaderListener(或ContextLoaderServlet)将Web容器与spring容器进行整合。-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--    RequestContextListener implements ServletRequestListener
    ServletRequestListener extends EventListener
    ServletRequestListener监听HTTP请求事件，Web服务器接收的每次请求都会通知该监听器。-->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
    <!--设置shiro过滤器-->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 这个Spring Web应用程序的前端控制器，负责处理所有的应用程序请求-->
    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- 将所有请求映射到DispatcherServlet进行处理 -->
    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

</web-app>
